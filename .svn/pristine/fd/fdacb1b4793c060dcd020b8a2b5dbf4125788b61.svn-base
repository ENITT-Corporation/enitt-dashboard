package kr.co.enitt.poscoWebSystem;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import kr.co.enitt.poscoWebSystem.controller.DashboardController;
import kr.co.enitt.poscoWebSystem.service.EventService;

@Component
public class WebSocketHandler extends TextWebSocketHandler{
	
	// 웹 소켓 세션을 저장할 리스트 생성
	private List<WebSocketSession> sessionList = new ArrayList<WebSocketSession>();
	
	private static final Logger logger = LoggerFactory.getLogger(DashboardController.class);

	// 클라이언트가 연결되었을 경우
	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		sessionList.add(session);
		logger.info("{ } 연결됨",session.getId());
	}

	
	// websocket 메시지 수신 및 송신
	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) {
		// 전달받은 메세지
		String mssg = message.getPayload();
		logger.info("{} 번호, {} 받음", session.getId(), message.getPayload());
		
	}
	
	// 클라이언트 연결을 끊었을 경우
	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		sessionList.remove(session);
		logger.info("{} 연결 끊김", session.getId());
	}

}
