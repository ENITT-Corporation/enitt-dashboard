package kr.co.enitt.poscoWebSystem.controller;

import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAdjusters;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import kr.co.enitt.poscoWebSystem.service.EventService;
import kr.co.enitt.poscoWebSystem.service.EventStatsService;
import kr.co.enitt.poscoWebSystem.vo.CommonVO;
import kr.co.enitt.poscoWebSystem.vo.EventStatsVO;
import kr.co.enitt.poscoWebSystem.vo.EventVO;
import kr.co.enitt.poscoWebSystem.util.ObjectUtil;

@Controller
@RequestMapping("/eventStats")
public class EventStatsController {

	private static final Logger logger = LoggerFactory.getLogger(EventStatsController.class);

	@Resource(name = "eventStatsService")
	private EventStatsService eventStatsService;
	
	@Resource(name = "eventService")
	private EventService eventService;
	
	/**
	  * @Method_Name : eventStats
	  * @return :ModelAndView
	  * @Date : 2022. 7. 13.
	  * @Author : ENITT_KHR
	  * @Method_Description : 이벤트 통계
	  * ---------------------
	  * @변경이력
	  * 2022. 7. 13. ENITT_KHR : 생성
	  */
	@RequestMapping(value= {"","/"})
	public ModelAndView eventStats(CommonVO vo) throws Exception {
		HashMap<Object, Object> resultList = new HashMap<Object, Object>();
		ModelAndView mav = new ModelAndView();
		
		List<String> eventDayDates = new ArrayList<>();
		List<String> eventMonthDates = new ArrayList<>();
		List<String> eventYearDates = new ArrayList<>();
		// 검색조건 세팅
		setEventSetting(vo);
		
		// 일별
		List<EventStatsVO> dayList = eventStatsService.getEventStatsDayList(vo);	
		for(int i=0 ; i<dayList.size() ; i++) {
			eventDayDates.add(dayList.get(i).getEventDate());
		}
		resultList.put("dayList", dayList);
		resultList.put("eventDayDates", eventDayDates);
		
		// 월별
		List<EventStatsVO> monthList = eventStatsService.getEventStatsMonthList(vo);
		for(int i=0 ; i<monthList.size() ; i++) {
			eventMonthDates.add(monthList.get(i).getEventDate());
		}
		resultList.put("monthList", monthList);
		resultList.put("eventMonthDates", eventMonthDates);
		
		// 년별
		List<EventStatsVO> yearList = eventStatsService.getEventStatsYearList(vo);
		for(int i=0 ; i<yearList.size() ; i++) {
			eventYearDates.add(yearList.get(i).getEventDate());
		}
		
		System.out.println("@@@@@@@@@@@@@@@@@@@");
		System.out.println("yearList::"+yearList);
		System.out.println("eventYearDates::"+eventYearDates);
		
		resultList.put("yearList", yearList);
		resultList.put("eventYearDates", eventYearDates);
		
		
		mav.addObject("resultList", resultList);
		
		if(ObjectUtil.isEmpty(vo.getMode())){
			vo.setMode("day");
		} 
		mav.addObject("commonVO", vo);
		mav.setViewName("eventStats/list");
		return mav;
	}
	
	/**
	  * @Method_Name : scatterPlotPopup
	  * @return :ModelAndView
	  * @Date : 2022. 7. 13.
	  * @Author : ENITT_KHR
	  * @Method_Description : 이벤트 통계 상세 분포도 팝업 호출
	  * ---------------------
	  * @변경이력
	  * 2022. 7. 13. ENITT_KHR : 생성
	  */
	@RequestMapping("/content/scatterPlotPopup")
	public ModelAndView scatterPlotPopup(CommonVO vo) throws Exception {
		ModelAndView mav = new ModelAndView();
		
		List<EventVO> eventList = eventService.getEventList(vo); 
		
		mav.addObject("eventList", eventList);
		mav.setViewName("eventStats/content/scatterPlot");
		return mav;
	}
	
	public void setEventSetting(CommonVO vo) {
		
		/** 일별 **/
		//검색 조건(날짜)
		if(ObjectUtil.isEmpty(vo.getSearchDay())){
			SimpleDateFormat  day = new SimpleDateFormat("yyyy-MM");
			vo.setSearchDay(day.format(new Date()));
		}
		
		/** 월별 **/
		//검색 조건(날짜)
		if(ObjectUtil.isEmpty(vo.getSearchMonth())){
			SimpleDateFormat  Month = new SimpleDateFormat("yyyy");
			vo.setSearchMonth(Month.format(new Date()));
		}
		
		/** 년별 **/
		//검색 조건(날짜)
		if(ObjectUtil.isEmpty(vo.getSearchYear())){
			Calendar beforeYear = Calendar.getInstance();
			SimpleDateFormat  year = new SimpleDateFormat("yyyy");
			vo.setSearchYearEnd(year.format(beforeYear.getTime())); 
			
			beforeYear.add(Calendar.YEAR , -4);
			vo.setSearchYear(year.format(beforeYear.getTime())); 			
		} 
		
		// 일별 - 01일/31일 세팅
		LocalDate firstDate = LocalDate.now().with(TemporalAdjusters.firstDayOfMonth());
		String firstDateString = firstDate.format(DateTimeFormatter.ISO_DATE);
		vo.setSearchDayFirst(firstDateString);	
		
		LocalDate lastDate = LocalDate.now().with(TemporalAdjusters.lastDayOfMonth());
		String lastDateString = lastDate.format(DateTimeFormatter.ISO_DATE);
		vo.setSearchDayLast(lastDateString);
	}
}
