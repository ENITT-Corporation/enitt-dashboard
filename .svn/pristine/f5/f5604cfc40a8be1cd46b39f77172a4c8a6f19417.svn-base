package kr.co.enitt.poscoWebSystem.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import kr.co.enitt.poscoWebSystem.service.CodeService;
import kr.co.enitt.poscoWebSystem.service.MemberService;
import kr.co.enitt.poscoWebSystem.util.CryptoUtil;
import kr.co.enitt.poscoWebSystem.util.DownloadUtil;
import kr.co.enitt.poscoWebSystem.util.ObjectUtil;
import kr.co.enitt.poscoWebSystem.util.SessionScopeUtil;
import kr.co.enitt.poscoWebSystem.vo.CodeVO;
import kr.co.enitt.poscoWebSystem.vo.CommonVO;
import kr.co.enitt.poscoWebSystem.vo.MemberVO;

/**
* @Project : poscoWebSystem
* @FileName : MemberController.java
* @Author : kej
* @Date : 2022. 8. 2. 
* @Description : 사용자 관리
* ===========================================================
* DATE                   AUTHOR                     NOTE
* -----------------------------------------------------------
* 2022. 8. 2.       		 kej      				최초작성
*/
@Controller
@RequestMapping("/member")
public class MemberController {
	
	@Autowired
	private MemberService memberService;
	
	@Resource(name = "codeService")
	private CodeService codeService;

	
	/**
	* @Method_Name : getMemberPage
	* @pram : HttpServletRequest request, CommonVO vo
	* @retuen : ModelAndView
	* @Date : 2022. 8. 2.
	* @Author : kej
	* @Method_Description : 목록
	* ---------------------
	* @변경이력
	* 2022. 8. 2. / kej / 생성
	*/ 
	@RequestMapping(value= {"","/"})
	public ModelAndView getMemberPage(HttpServletRequest request, CommonVO vo) throws Exception {
		ModelAndView mav = new ModelAndView();
		request.setCharacterEncoding("UTF-8");
		
		//목록 갯수
		int cnt = memberService.getMemberListCnt(vo);
		vo.setTotalCount(cnt);
		//목록
		List<MemberVO> list = memberService.getMemberPagingList(vo);
		mav.addObject("list", list);
		

		vo.setParentCode("AUTH");
		List<CodeVO> authList = codeService.getCodeList(vo);
		mav.addObject("authList", authList);

		vo.setParentCode("MAIL");
		List<CodeVO> mailList = codeService.getCodeList(vo);
		mav.addObject("mailList", mailList);
		
		mav.addObject("commonVO", vo);
		mav.setViewName("member/list");
		return mav;
	}
	
	/**
	* @Method_Name : excelList
	* @pram :
	* @retuen : void
	* @Date : 2022. 8. 11.
	* @Author : kej
	* @Method_Description : 
	* ---------------------
	* @변경이력
	* 2022. 8. 11. / kej / 생성
	*/ 
	@RequestMapping("/excel/list")  
	public void excelList(HttpServletRequest request, HttpServletResponse response, CommonVO vo) throws Exception {
		request.setCharacterEncoding("UTF-8");
		 
		vo.setNow(ObjectUtil.getNow("",0)); // 현재 시간
		
		List<MemberVO> list = memberService.getMemberList(vo);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("sheetName","사용자 관리");
		map.put("fileName","사용자 관리");
		map.put("title","ID,이름");
		map.put("cell","id,name");
		
		DownloadUtil.ecxelDown(request, response, map, list,"Y");
	} 
	
	/**
	* @Method_Name : ajaxMemberDetail
	* @pram : HttpServletRequest request, MemberVO vo
	* @retuen : ModelAndView
	* @Date : 2022. 8. 2.
	* @Author : kej
	* @Method_Description : 상세정보
	* ---------------------
	* @변경이력
	* 2022. 8. 2. / kej / 생성
	*/ 
	@RequestMapping("/ajaxMemberDetail")
	public ModelAndView ajaxMemberDetail(HttpServletRequest request, MemberVO vo) throws Exception {
		ModelAndView mav = new ModelAndView();
		request.setCharacterEncoding("UTF-8");
		
		//상세
		MemberVO detail = memberService.getMemberDetail(vo);
		mav.addObject("detail", detail);

		// 검색 조건 목록
		CommonVO commonVO = new CommonVO();
		commonVO.setParentCode("AUTH");
		List<CodeVO> authList = codeService.getCodeList(commonVO);
		mav.addObject("authList", authList);


		commonVO.setParentCode("MAIL");
		List<CodeVO> mailList = codeService.getCodeList(commonVO);
		mav.addObject("mailList", mailList);
		
		mav.setViewName("member/content/detail");
		return mav;
	}
	
	/**
	* @Method_Name : ajaxMemberCreatepage
	* @pram : HttpServletRequest request, MemberVO vo
	* @retuen : ModelAndView
	* @Date : 2022. 8. 2.
	* @Author : kej
	* @Method_Description : 등록 화면 표출
	* ---------------------
	* @변경이력
	* 2022. 8. 2. / kej / 생성
	*/ 
	@RequestMapping("/ajaxMemberCreatepage")
	public ModelAndView ajaxMemberCreatepage(HttpServletRequest request, MemberVO vo) throws Exception {
		ModelAndView mav = new ModelAndView();
		request.setCharacterEncoding("UTF-8");
		
		// 검색 조건 목록
		CommonVO commonVO = new CommonVO();
		commonVO.setParentCode("AUTH");
		List<CodeVO> authList = codeService.getCodeList(commonVO);
		mav.addObject("authList", authList);
		
		commonVO.setParentCode("MAIL");
		List<CodeVO> mailList = codeService.getCodeList(commonVO);
		mav.addObject("mailList", mailList);

		mav.setViewName("member/content/detail");
		return mav;
	}
	
	/**
	* @Method_Name : ajaxMemberIdCheck
	* @pram : HttpServletRequest request, MemberVO vo
	* @retuen : Object
	* @Date : 2022. 8. 2.
	* @Author : kej
	* @Method_Description : dkdlel cpzm
	* ---------------------
	* @변경이력
	* 2022. 8. 2. / kej / 생성
	*/ 
	@RequestMapping("/ajaxMemberIdCheck")
	public @ResponseBody Object ajaxMemberIdCheck(HttpServletRequest request, MemberVO vo) throws Exception {
		request.setCharacterEncoding("UTF-8");
		
		HashMap result = new HashMap();
		
		MemberVO member = memberService.getMemberDetail(vo);
		if(ObjectUtil.isEmpty(member)) {
			result.put("result",true);
			result.put("msg","사용 가능한 ID입니다.");
			
		}else {
			result.put("result",false);
			result.put("msg","다른 사용자가 이미 사용중인 ID입니다.");
			
		}
		return result;
	}
	
	
	/**
	* @Method_Name : ajaxMemberCreate
	* @pram : HttpServletRequest request, MemberVO vo
	* @retuen : ModelAndView
	* @Date : 2022. 8. 2.
	* @Author : kej
	* @Method_Description : 등록
	* ---------------------
	* @변경이력
	* 2022. 8. 2. / kej / 생성
	*/ 
	@RequestMapping("/ajaxMemberCreate")
	public @ResponseBody Object ajaxMemberCreate(HttpServletRequest request, MemberVO vo) throws Exception {
		request.setCharacterEncoding("UTF-8");
		HashMap result = new HashMap();
		
		try {
			//등록
			Object sessionLoginVo = SessionScopeUtil.getAttribute("memberVO");
			MemberVO memberVO = (MemberVO) Optional.ofNullable(sessionLoginVo).orElse(new MemberVO());
			vo.setRegisterId(memberVO.getId());
			vo.setRegisterIp(request.getRemoteAddr());
			vo.setPassword(CryptoUtil.decrypt(vo.getPassword(), vo.getNow())); // 비밀번호 암호화
			
			memberService.setMemberCreate(vo);
			
			result.put("result", true);
			result.put("msg","정상적으로 등록했습니다.");
		} catch (Exception e) {
			result.put("result", false);
			result.put("msg","오류가 발생했습니다.");
		}
		
		return result;
	}
	
	
	/**
	* @Method_Name : ajaxMemberUpdate
	* @pram : HttpServletRequest request, MemberVO vo
	* @retuen : ModelAndView
	* @Date : 2022. 8. 2.
	* @Author : kej
	* @Method_Description : 수정
	* ---------------------
	* @변경이력
	* 2022. 8. 2. / kej / 생성
	*/ 
	@RequestMapping("/ajaxMemberUpdate")
	public @ResponseBody Object ajaxMemberUpdate(HttpServletRequest request, MemberVO vo) throws Exception {
		ModelAndView mav = new ModelAndView();
		request.setCharacterEncoding("UTF-8");
		HashMap result = new HashMap();
		
		
		try {
			//수정
			Object sessionLoginVo = SessionScopeUtil.getAttribute("memberVO");
			MemberVO memberVO = (MemberVO) Optional.ofNullable(sessionLoginVo).orElse(new MemberVO());
			vo.setUpdateId(memberVO.getId());
			vo.setUpdateIp(request.getRemoteAddr());
			
			memberService.setMemberUpdate(vo);
			
			result.put("result", true);
			result.put("msg","정상적으로 수정했습니다.");
		} catch (Exception e) {
			result.put("result", false);
			result.put("msg","오류가 발생했습니다.");
		}
		
		return result;
	}
	
	/**
	  * @Method_Name : ajaxUpdatePassword 
	  * @retuen :Object
	  * @Date : 2020. 8. 9.
	  * @Author : ENITT_KEJ
	  * @Method_Description : 비밀번호 변경
	  * ---------------------
	  * @변경이력
	  * 2020. 8. 9. ENITT_KEJ : 생성
	  */
	@RequestMapping("/ajaxUpdatePassword")
	public @ResponseBody Object ajaxUpdatePasssword(HttpServletRequest request, MemberVO vo) throws Exception {
		request.setCharacterEncoding("UTF-8");
		CommonVO commonVO = new CommonVO();
		try {
			
			vo.setNewPassword(CryptoUtil.decrypt(vo.getNewPassword(), vo.getNow())); //새 비밀번호 암호화

			// 회원 비밀번호 수정
			vo.setPassword(vo.getNewPassword());
			memberService.setMemberPasswordUpdate(vo);
			commonVO.setResult(true);
			commonVO.setContent("정상적으로 변경 되었습니다.");
				
				
		} catch (Exception e) {
			System.out.println(e);
			commonVO.setContent("오류가 발생했습니다.");
			commonVO.setResult(false);
		}
		
		return commonVO; 
	}
}
