package kr.co.enitt.poscoWebSystem.controller;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import kr.co.enitt.poscoWebSystem.service.AttachService;
import kr.co.enitt.poscoWebSystem.util.FileUtil;
import kr.co.enitt.poscoWebSystem.vo.FileUtilVO;
import kr.co.enitt.poscoWebSystem.vo.FileVO;


@Controller
@RequestMapping("/attach")
public class AttachController {

	private static final Logger logger = LoggerFactory.getLogger(AttachController.class);
	
	@Resource(name = "AttachService")
	private AttachService attachService;
	
	@Value("${file.upload.directory}")
	String filePath;
	
	// 수정 화면으로 이동
	@RequestMapping(value={"","/"}, params="mode=update")
	public ModelAndView updateMain(FileUtilVO fileUtilVO) {
		ModelAndView mav = new ModelAndView();
		
		fileUtilVO.setFTypeName("excel");
		
		mav.addObject("FileUtilVO", fileUtilVO);		
		mav.setViewName("dashboard/form");
		return mav;
	}
	
	// 등록 화면으로 이동
	@RequestMapping(value={"","/"}, params="mode=create")
	public ModelAndView createMain(FileUtilVO fileUtilVO) {
		ModelAndView mav = new ModelAndView();
		
		fileUtilVO.setFTypeName("excel");
		
		mav.addObject("FileUtilVO", fileUtilVO);	
		mav.setViewName("dashboard/form");
		return mav;
	}
	
	// 첨부된 파일 등록
	@PostMapping(value="/setFile")
	public ModelAndView setFile(MultipartHttpServletRequest request, FileUtilVO fileUtilVO) throws Exception {
		ModelAndView mav = new ModelAndView();
		FileVO fileVO = new FileVO();
		Random rm = new Random();
		
		try {
			if(request.getParameter("mode").equals("create")) { // 등록
				fileVO.setFileSubId(rm.nextInt(100)+1);
			} else { // 수정
				fileVO.setFileSubId(fileUtilVO.getFileSubId());
			}
			
			fileVO.setFileGroup("attachFile");
			fileVO.setFilePath(filePath);	
		
			FileUtil.setMultiFile(request, fileVO, fileUtilVO);
			
			fileUtilVO.setResult(true);
			fileUtilVO.setContent("정상적으로 등록되었습니다.");
			fileUtilVO.setMode("detail");
		} catch(Exception e) {
			fileUtilVO.setResult(false);
			fileUtilVO.setContent("오류가 발생했습니다.");
			e.printStackTrace();
		}
		
		mav.addObject("FileUtilVO", fileUtilVO);
		mav.setViewName("dashboard/attach_detail");
		
		return mav;
	}
	
	// 파일 삭제 기능 실행
	@RequestMapping(value="/ajaxDeleteFile")
	public @ResponseBody Object DeleteFile(FileVO fileVO) throws Exception{
		Map<String, Object> resultMap = new HashMap<String, Object>();
		FileUtilVO fileUtilVO = new FileUtilVO();
		
		try {
			FileUtil.deleteFile(fileVO); 
			
			fileUtilVO.setResult(true);
			fileUtilVO.setContent("삭제되었습니다.");
		} catch(Exception e) {
			fileUtilVO.setResult(false);
			fileUtilVO.setContent("오류가 발생했습니다.");
			e.printStackTrace();
		}
		
		resultMap.put("FileUtilVO", fileUtilVO);
		return resultMap;
	}
	
	// 상세 화면으로 이동
	@RequestMapping(value= {"","/"}, params="mode=detail")
	public ModelAndView detail(FileUtilVO fileUtilVO) throws Exception{
		ModelAndView mav = new ModelAndView();
		
		mav.addObject("FileUtilVO", fileUtilVO);
		mav.setViewName("dashboard/attach_detail");
		return mav;
	}
}
