package kr.co.enitt.poscoWebSystem.util;

import java.util.Collection;
import java.util.Enumeration;
import java.util.Hashtable;

import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpSessionBindingEvent;
import javax.servlet.http.HttpSessionBindingListener;

public class SessionListener implements HttpSessionBindingListener{
	
	//싱글톤 객체를 담을 변수
		private static SessionListener sessionListener = null;
		
		//로그인한 접속자를 저장한  HashTable
		private static Hashtable loginUsers = new Hashtable();
		
		//싱글톤 처리
		public static synchronized SessionListener getInstance() {
			if(sessionListener == null) {
				sessionListener = new SessionListener();
			}
			
			return sessionListener; 
		}
		
		//세션 연결시 호출(해시테이블에 접속자 저장)
		@Override
		public void valueBound(HttpSessionBindingEvent event) {
			loginUsers.put(event.getSession(), event.getName());
			
			System.out.println(event.getName()+" 로그인 완료");
			System.out.println("현재 접속자 수 : "+getUserCount());
		}
		
		//세션 끊겼을 시 호출
		@Override
		public void valueUnbound(HttpSessionBindingEvent event) {
			loginUsers.remove(event.getSession());
			
			System.out.println(event.getName()+" 로그아웃 완료");
			System.out.println("현재 접속자 수 : "+getUserCount());
		}
		
		//입력 받은 아이디를 헤시테이블에서 삭제
		public void removeSession(String userId) {
			Enumeration e = loginUsers.keys();
			HttpSession session = null;
			
			while(e.hasMoreElements()) {
				session = (HttpSession)e.nextElement();
				
				if(loginUsers.get(session).equals(userId)) {
					//세션이 invalidation 될 때 HttpSessionBindingListener를 구현하는 클래스의 valueBound가 호출됨
					session.invalidate();
				}
				
			}
			
		}
		
		//아이디 사용 여부 확인
		public boolean isUsing(String memberId) {
			return loginUsers.containsValue(memberId);
		}
		
		//로그인을 완료한 사용자의 아이디를 세션에 저장하는 메소드
		public void setSession(HttpSession session, String memberId) {
			//이 때  Session Binding 이벤트가 일어나는 시점
			//name 값으로 userId , value값으로 자기 자신(HttpSessionBindingListener를 구현하는 오브젝트)
			session.setAttribute(memberId, this);
		}
		
		/*
		 * 입력받은 세션 Object로 아이디를 리턴함.
		 * @param session : 접속한 사용자의 세션 오브젝트
		 * @return String : 접속자 아이디
		 */
		public String getMemberId(HttpSession session) {
			return (String)loginUsers.get(session);
		}
		
		/*
		 * 현재 접속한 총 사용자 수
		 * @return int 현재 접속자 수
		 */
		public int getUserCount() {
			return loginUsers.size();
		}
		
		/*
		 * 현재 접속중인 모든 사용자를 출력
		 * @return void
		 */
		public void printLoginUsers() {
			Enumeration e = loginUsers.keys();
			HttpSession session = null;
			System.out.println("-------------");
			int i=0;
			while(e.hasMoreElements()) {
				session = (HttpSession)e.nextElement();
				System.out.println((++i) + ". 접속자 : "+loginUsers.get(session));
			}
			System.out.println("-------------");
		}
		
		/*
		 * 현재 접속중인 모든 사용자를 리턴
		 * @return list
		 */
		public Collection getUsers() {
			Collection collection = loginUsers.values();
			return collection;
		}
}
