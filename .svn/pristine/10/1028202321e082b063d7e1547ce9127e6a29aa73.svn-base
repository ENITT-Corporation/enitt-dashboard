package kr.co.enitt.poscoWebSystem.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.session.SessionRegistry;
import org.springframework.security.core.session.SessionRegistryImpl;
import org.springframework.security.web.csrf.CookieCsrfTokenRepository;


@Configuration
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter  {
	
    @Override
    protected void configure(HttpSecurity http) throws Exception {
//    	http
//        .csrf()
//        .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())
//        .disable()
//        ;
    	//중복 로그인 방지
//        http.sessionManagement()
//        	.maximumSessions(1)
//        	.maxSessionsPreventsLogin(false) //먼저 접속한 사용자 로그아웃 처리
//        	.expiredUrl("/duplicatedLogin") //최대 세션 도달 시 이동할 페이지 지정 : alert 띄울 url
//        	.sessionRegistry(sessionRegistry());    	
    	http.headers().frameOptions().deny();
        http.authorizeRequests().antMatchers("/login","/actionLogin","/logout","/resources/**","/error","/api/**","/").permitAll();
    	
    	//로딩 시, 로그인 화면 없애기
    	 http.httpBasic().disable();
    	 http.csrf().csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()).disable();
    }
    
    //logout 후 login할 때 정상 작동을 위함
//    @Bean
//    public SessionRegistry sessionRegistry() {
//    	return new SessionRegistryImpl();
//    }

}