package kr.co.enitt.poscoWebSystem.util;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import kr.co.enitt.poscoWebSystem.service.AttachService;
import kr.co.enitt.poscoWebSystem.vo.FileUtilVO;
import kr.co.enitt.poscoWebSystem.vo.FileVO;
import net.coobird.thumbnailator.Thumbnails;

public class FileUtil {
	
	static AttachService attachService = (AttachService) BeanUtils.getBean("AttachService");
	
	static File saveFile = null;
	static File thumbnailsFile = null;
	
	/**
	 * 다중 파일 첨부 시, DB 및 실제 위치에 저장하는 함수
	 * @param request 	 - mode / 파일 읽기
	 * @param fileVO 	 - filePath : 파일 저장 위치(application.properties에서 가져옴)
	 * 					 - fileGroup : 파일 그룹
	 * 					 - fileSubId : 파일 구분 짓기 위한 ID
	 * @param fileUtilVO 	 - memberId : Session에 저장되어 있는 회원 ID
	 */
	public static void setMultiFile(MultipartHttpServletRequest request, FileVO fileVO, FileUtilVO fileUtilVO) throws Exception{
		SimpleDateFormat date = new SimpleDateFormat("yyyyMMddHHmmss");
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		Map<String, Object> listMap = null;
		
		int idx = 0;
		int updateIdx = 0;
		
		MultipartFile multipartFile = null;
		Iterator<String> iterator = request.getFileNames();
		
		String realFileNm;
		while(iterator.hasNext() ) {
			multipartFile = request.getFile(iterator.next());
			
			if(multipartFile.isEmpty() == false) {
				idx++;
				
				listMap = new HashMap<String, Object>();
				
				realFileNm = multipartFile.getOriginalFilename();
				int pos = realFileNm.lastIndexOf(".");
				String fileNm = realFileNm.substring(0, pos)+"_"+date.format(System.currentTimeMillis());
				String fileEtx = realFileNm.substring(pos+1).toLowerCase();
			
				listMap.put("filePath", fileVO.getFilePath());
				listMap.put("fileGroup", fileVO.getFileGroup());
				listMap.put("fileName", fileNm);
				listMap.put("fileSubId", fileVO.getFileSubId()); 
				listMap.put("fileDataId", fileUtilVO.getMemberId());
				listMap.put("fileOrgnNm", realFileNm);
				listMap.put("fileFullNm", fileVO.getFilePath()+fileVO.getFileGroup()+"/"+realFileNm);
				listMap.put("fileSize", Math.toIntExact(multipartFile.getSize()));
				listMap.put("fileEtx", fileEtx);
				
				
				
				if(request.getParameter("mode").equals("create")) {
					listMap.put("fileNo", idx);
				} else {
					updateIdx = attachService.updateIdx(fileVO);
					listMap.put("fileNo", updateIdx + idx);
					
				}
				
				saveFile = new File(fileVO.getFilePath()+fileVO.getFileGroup()+"/"+fileNm+"."+fileEtx);
				multipartFile.transferTo(saveFile);
			
				// 이미지일 경우
				if(fileEtx.equals("png") || fileEtx.equals("jpg") || fileEtx.equals("jpeg")) {
					thumbnailsFile = new File(fileVO.getFilePath()+fileVO.getFileGroup()+"/thumbnail/"+fileNm+"."+fileEtx);
					Thumbnails.of(saveFile).forceSize(300, 300).toFile(thumbnailsFile);
				}
				
				list.add(listMap);
			}
	
		}
		try {
			attachService.createFile(list);
			fileUtilVO.setFileSubId(fileVO.getFileSubId());
			
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 지정된 첨부 파일 삭제
	 * @param FileVO 
	 * 			fileNo		 	- 파일 순번
	 * 			fileSubId 		- 등록했을 당시의 파일 서브 ID
	 */
	public static void deleteFile(FileVO fileVO) {
		try {
			attachService.deleteFile(fileVO);
			
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 다중 파일 첨부하는 폼 
	 * @param FileUtilVO 
	 * 			mode 		 	- 등록 / 수정 인지 구분
	 * 			memberId	  	- 파일 첨부하는 회원 ID
	 * 			fileSubId 		- 등록했을 당시의 파일 서브 ID
	 * @return     		 		- HTML
	 */
	public static String attachFileHtml(FileUtilVO fileUtilVO) throws Exception{
		StringBuilder html = new StringBuilder();
		
		html.append("<div class=\"con\">");
		html.append("<h3>"+ fileUtilVO.getFTypeName() +" 파일만 등록할 수 있습니다. </h3>");
		html.append("<form name=\"attach_form\" id=\"attach_form\" method=\"post\" enctype=\"multipart/form-data\" action=\"/attach/setFile\">");
		html.append("	<div class=\"fileBox\">");
		html.append("		<label for=\"attachFile0\">찾아보기</label>");
		html.append("			<input type=\"file\" class=\"fAchBtn "+ fileUtilVO.getFTypeName() +"\" name=\"attachFile0\" id=\"attachFile0\" accept=\""+FileUtil.setFileType(fileUtilVO)+"\" onchange=\"afCommon.fncAttachFile(0);\" />"); 
		html.append("			<input type=\"text\" class=\"fileNmInput0\" name=\"fileNmInput0\" id=\"fileNmInput0\" readonly />");
		html.append("	</div>");
		html.append("	<div class=\"bottomDiv\">");
		html.append("		<input type=\"hidden\" name=\"mode\" id=\"mode\" value=\"create\" />");
		html.append("		<input type=\"hidden\" name=\"fileSubId\" id=\"fileSubId\" value=\"0\" />");
		html.append("		<input type=\"hidden\" name=\"memberId\" id=\"memberId\" value=\""+ fileUtilVO.getMemberId() +" \" />");
		html.append("	</div>");
		html.append("</form>");
		html.append("<button class=\"btn_left Mr15 plusBtn\" onclick=\"afCommon.fncPlusFile()\">파일추가</button>");
		html.append("<div class=\"btnDiv\">");		
		
		if(fileUtilVO.getMode().equals("update")) {
			html.append("<button class=\"btn_left attachBtn\" onclick=\"afCommon.fncSetFile('update','"+ fileUtilVO.getFileSubId() +"')\">수정</button>"); 
			html.append("<button class=\"btn detailBtn\" onclick=\"fncGoCreate()\">뒤로</button>");
		} else {
			html.append("<button class=\"btn_left attachBtn\" onclick=\"afCommon.fncSetFile('create',0)\">등록</button>");
			html.append("<button class=\"btn detailBtn\" onclick=\"fncGoDetail()\">상세</button>");
		}
		
		html.append("</div>");
		
		return html.toString();
	}
	
	/**
	 * 다중 파일 목록 조회 HTML
	 * @param FileUtilVO   - mode : 등록 / 수정 화면인지 구분
	 * @return     		 - HTML
	 */
	public static String getFileListHtml(FileUtilVO fileUtilVO) throws Exception{
		StringBuilder html = new StringBuilder();
		List<FileVO> fileList = new ArrayList<FileVO>();
		
		try {
			fileList = attachService.getFileList(fileUtilVO);	

			html.append("<ul>");
			
			for(int i=0 ; i<fileList.size() ; i++) {
					html.append("<li class=\"fileList\" type=\"circle\">");
					html.append("	<span>"+fileList.get(i).getFileName()+"."+fileList.get(i).getFileEtx()+" "+FileUtil.getImgSize(fileList.get(i).getFileSize())+"</span>");
					if(fileUtilVO.getMode().equals("update")) {
						html.append("<button class=\"imgBtn btnDelete\" type=\"button\" onclick=\"afCommon.fncDeleteFile("+fileList.get(i).getFileNo()+")\">");
						html.append("	<span style=\"color: #FF0000;\">");
						html.append("		<i class=\"fa fa-times\" aria-hidden=\"true\"></i>");
						html.append("	</span>");
						html.append("</button>");
					}
					html.append("</li>");
				
			}
			
			html.append("</ul>");
			
		} catch(Exception e) {
			e.printStackTrace();
		}
		
		return html.toString();
	}
	
	/**
	 * 첨부 파일 수정 버튼 HTML
	 * @param FileUtilVO   - fileSubId : 첨부된 파일 서브 ID
	 * @return     		 - HTML
	 */
	public static String updateBtnHtml(FileUtilVO fileUtilVO) {
		StringBuilder html = new StringBuilder();
		
		try {
			html.append("	<div class=\"btnDiv\">");
			html.append("		<button class=\"btn Ml10 detailBtn\" onclick=\"fncGoCreate()\">뒤로</button>");
			html.append("		<button class=\"btn detailBtn\" onclick=\"fncGoUpdate('"+fileUtilVO.getFileSubId()+"')\">수정</button>");
			html.append("	</div>");
		} catch(Exception e) {
			e.printStackTrace();
		}
		
		return html.toString();
	}
	
	/**
	 * 등록된 이미지 크기 포맷하는 함수
	 * @param imgSize 	 - 이미지 크기
	 * @return     		 - 포맷된 이미지 크기 정보
	 */
	public static String getImgSize(Integer imgSize) {
	    long size = imgSize;
		String str = "";
		String type = "";
		String format = "###,###,###,###";
		java.text.DecimalFormat df = new java.text.DecimalFormat(format);
		
		if(size > 999999){
			size = size / 1000000;
			type = "MByte";
		}else if(size > 999){
			size = size / 1000;
			type = "KByte";
		}else{
			type = "Byte";
		}
		str = "("+df.format(size)+type+")";
		
		return str;	
	}
	
	/**
	 * 파일 선택 확장자 지정
	 * @param FileUtilVO 	- fTypeName : 확장자 이름
	 * @return 				- fTypeList
	 */	
	public static Object setFileType(FileUtilVO fileUtilVO) {
		String[] fTypeList = null;
		switch(fileUtilVO.getFTypeName()) {
			case "image" : 
				fTypeList = new String []{"image/bmp","image/png","image/jpg","image/jpeg"};
				break;
			case "excel" :
				fTypeList = new String []{"application/vnd.ms-excel","application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"};
				break;
			case "text" :
				fTypeList = new String []{"text/csv","text/html","text/xml","text/plain"};
				break;
			case "docx" :
				fTypeList = new String []{".doc",".docx","application/msword","application/vnd.openxmlformats-officedocument.wordprocessingml.document"};
				break;
			case "ppt" :
				fTypeList = new String []{"text/x-jsp"};
				break;
			case "pdf" :
				fTypeList = new String []{"application/pdf"};
				break;
			case "video" :
				fTypeList = new String []{"video/*"};
				break;
			default :
				break;
		}
		
		return String.join(",", fTypeList);
	}
}
